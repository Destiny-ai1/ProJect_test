<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.member.MemberDao">
	<!--회원가입 읽어오기-->
	<insert id="save" parameterType="com.example.demo.member.Member">
        insert into member (username, password, name, email, phone, joinday, totalpurchase, grade, login_fail_count, enabled, role, point)
        values (#{username}, #{password}, #{name}, #{email}, #{phone}, #{joinday}, #{totalpurchase}, #{grade}, #{loginFailCount}, #{enabled}, #{role}, #{point})
    </insert>
    
    <!--아이디 중복인지 체크후 사용가능한지 확인-->
    <select id="existsById" parameterType="String" resultType="int">
        select count(username) from member where username = #{username}
    </select>
    
    <!-- 이메일을 통해 아이디 찾기 -->
    <select id="findByIdUsernameByEmail" parameterType="map" resultType="String">
        select username from member where name=#{name} and email = #{email}
    </select>
    
    <!-- 이메일로 임시비밀번호를 받아와서 임시비밀번호로 바꾸기-->
    <select id="findBypasswordUsernameByEmail" parameterType="map" resultType="com.example.demo.member.Member">
        select * from member where username = #{username} and name=#{name} and email = #{email}
    </select>
    
    <!--임시비밀번호 날라온값을 DB에 업데이트 시킨다-->
    <update id="update" parameterType="com.example.demo.member.Member">
    update member set password = #{password} where username = #{username}
	</update>
	
	<!-- 회원 정보 불러올때 -->
    <select id="UserDetails" parameterType="String" resultType="com.example.demo.member.MemberDto$Member_Read">
        select name,email,phone,joinday,totalpurchase,grade,role,point from member where username = #{username}
    </select>
    
    <!-- 회원 정보를 불러올때 password 입력받기 -->
    <select id="UserDetailspassword" parameterType="String" resultType="String">
        select password from member where username = #{username}
    </select>
    
    <!--DB에 암호화된 정보를 불러오기-->
    <select id="PasswordDB" parameterType="String" resultType="String">
    select password from member where username = #{username}
	</select>
	
    <!-- 내정보에서 비밀번호 변경  -->
    <update id="PasswordChange">
       	update member set password = #{newPassword} where username = #{username}
    </update>
	
	<!-- 회원 포인트 조회 -->
    <select id="userpoint" resultType="java.lang.Integer">
        select coalesce(point, 0) from member where username = #{username}
    </select>
    
    <!--회원의 총 구매금액조회-->
    <select id="gettotalPurchase" resultType="java.lang.Integer">
    select  coalesce(totalpurchase, 0) from member where username= #{username}
    </select>
    
    <!--회원의 현재 등급 조회-->
    <select id ="getGrade" parameterType="map">
    select grade from member where username= #{username}
    </select>
    
	<!-- 구매금액에따라 회원의 등급,포인트,총구매금액 업데이트 -->
    <update id="Update_Point" parameterType="map">
        update member set point = #{point}, totalpurchase = #{totalPurchase}, Grade = #{Grade} where username = #{username}
    </update>
	
	<!--로그인실패시 회원의 아이디만 조회할때-->
	<select id="findById" resultType="com.example.demo.member.Member">
		select username from member where username=#{username}
	</select>
	
    <!-- 로그인 실패 시 카운트 증가 및 계정 블럭 -->
    <update id="memberLoginFailAndBlock" parameterType="string">
        update member set login_fail_count = login_fail_count + 1,
        enabled = case when login_fail_count + 1 >= 5 then 0 else enabled end where username = #{username}
    </update>

    <!-- 로그인 성공 시 실패 카운트 초기화 -->
    <update id="loginSuccessReset" parameterType="string">
        update member set login_fail_count = 0 where username = #{username}
    </update>
    
    <!--회원정보 업데이트되는 것들 동적 처리-->
    <update id="Member_update">
    	update member <set>
        <if test="email != null">
            email = #{email},
        </if>
        
        <if test="phone != null">
            phone = #{phone},
        </if>
    </set>
    where username = #{username} and rownum = 1
    </update>

    <!-- 회원 탈퇴 -->
    <delete id="delete" parameterType="com.example.demo.member.Member">
        delete from member where username = #{username}
    </delete>
</mapper>