<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.board.BoardDao">
	
	<!-- 카테고리별 공지사항 글번호증가 -->
	<select id="findBnoByCategory" parameterType="int" resultType="long">
    select coalesce(Max(bno), 0) from board where cno = #{cno}
	</select>

    <!-- 게시물 저장 -->
    <insert id="save" parameterType="com.example.demo.board.Board">
        <selectKey order="BEFORE" resultType="long" keyProperty="bno">
            select board_seq.nextval from dual
        </selectKey>
        insert into board (
            bno, title, content, writer, write_time, read_cnt, board_password, secret_Board, board_delete, username, cno)
        values (#{bno}, #{title}, #{content}, #{writer}, sysdate, #{readCnt},
        COALESCE(#{password, jdbcType=VARCHAR}, NULL), 
         #{SecretBoard}, #{board_delete}, #{username}, #{cno})
    </insert>

    <!-- 게시글 조회 (댓글 포함) -->
    <select id="findById" resultMap="BoardAndCommentsMap">
        select b.bno, b.title, b.content, b.writer, to_char(b.write_time, 'YYYY-MM-DD HH24:MI:SS') as writeTime, 
             nvl(b.read_cnt, 0) as readCnt, b.board_password, case when b.secret_board = 1 then 'true' else 'false' end as SecretBoard,
             b.board_delete, b.username, b.cno, cat.cname, 
             c.comment_cno, c.comment_content, c.comment_writer, to_char(c.comment_write_time, 'YYYY-MM-DD HH24:MI:SS') as comment_writeTime
        from board b 
        left join member m on b.writer = m.username
        left join comments c on b.bno = c.bno
        left join category cat on b.cno = cat.cno
        where b.bno = #{bno} and b.board_delete = 0
        order by c.comment_write_time desc
    </select>
	
	<!--게시글 업데이트-->
	<update id="Board_update" parameterType="com.example.demo.board.Board">
		update board set title = #{title}, content = #{content} where bno = #{bno}
	</update>
	
	<!--게시글 삭제-->
	<delete id="Board_delete" parameterType="Long">
    delete from board where bno = #{bno}
	</delete>
	
    <!-- 전체 카테고리별 조회수 -->
    <select id="Count" parameterType="map" resultType="int">
        select count(*) from board where board_delete = 0
        <if test="cno != null"> and cno = #{cno, jdbcType=INTEGER} </if>
    </select>

    <!-- 특정 범위의 게시물 조회 -->
	<select id="findAll" parameterType="map" resultType="com.example.demo.board.BoardDto$BoardList">
    <![CDATA[
    	select * from (
        	select rownum as rnum, 
               b.bno, b.title, b.writer, to_char(b.write_time, 'yyyy-mm-dd hh24:mi:ss') as writeTime, 
               b.read_cnt, b.cno, case when b.secret_board = 1 then 'true' else 'false' end as SecretBoard, 
               cat.cname
        from (
            select /*+ index_desc(board board_pk_bno) */
                   b.bno, b.title, b.writer, b.write_time, b.read_cnt, b.cno ,b.secret_board
            from board b
            where b.board_delete = 0
    	]]>
            <if test="cno != null">
                <![CDATA[ and b.cno = #{cno} ]]>
            </if>
            <![CDATA[
            order by b.write_time desc
        ) b
        left join member m on b.writer = m.username
        left join category cat on b.cno = cat.cno
        where rownum <= #{endRowNum, jdbcType=INTEGER}
    )
    where rnum >= #{startRowNum, jdbcType=INTEGER}
    ]]>
	</select>


    <!-- 게시글과 댓글 출력 -->
    <resultMap id="BoardAndCommentsMap" type="com.example.demo.board.BoardDto$BoardRead">
        <id column="bno" property="bno"/>
        <result column="title" property="title"/>
        <result column="content" property="content"/>
        <result column="writer" property="writer"/>
        <result column="writeTime" property="writeTime"/>
        <result column="readCnt" property="readCnt"/>
        <result column="board_password" property="password"/>
        <result column="Secretboard" property="SecretBoard" javaType="boolean"/>	
        <result column="board_delete" property="board_delete"/>
        <result column="cno" property="cno"/>
        <result column="cname" property="cname"/>
        
        <!-- 댓글 출력 -->
        <collection property="comments" javaType="java.util.List" ofType="com.example.demo.comment.CommentDto$Read">
            <id column="comment_cno" property="cno"/>
            <result column="comment_writer" property="writer"/>
            <result column="comment_content" property="content"/>
            <result column="comment_writeTime" property="writeTime"/>
        </collection>
    </resultMap>
</mapper>
