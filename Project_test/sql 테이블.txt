-- 
-- 시스템 user 제작
create user c##winter_shop identified by 1234;
grant connect, resource to c##winter_shop;
alter user c##winter_shop default tablespace users quota unlimited on users;

-- 3번삭제
drop table member;
drop table category;
drop table item;
drop table image;
drop table cart;
drop table address;
drop table board;
drop table orders;
drop table orders_detail;
drop table card;
drop table payment;
drop table review;

drop sequence item_seq;

PURGE RECYCLEBIN;

select * from tab;

--회원테이블
create table member (
    username varchar2(50 CHAR),                             -- 회원의 고유 Id (primary key)
    password varchar2(60 CHAR),                             -- 회원의 비밀번호
    name varchar2(50 CHAR),                                 -- 회원의 이름
    email varchar2(30 CHAR),                                -- 회원의 이메일 주소
    phone varchar2(20 char),                                -- 회원의 전화번호
    joinday date,                                           -- 회원 가입일
    totalpurchase number(10),                            	-- 회원의 총 구매 금액
    grade varchar2(10 CHAR),                                -- 회원 등급 (예: 일반, VIP)
    login_fail_Count number(1),                             -- 로그인 실패 횟수
    enabled number(1),                                      -- 계정 활성화 상태 (1: 활성, 0: 비활성)
    role varchar2(20 CHAR),                                 -- 회원의 역할 (예: 관리자, 사용자)
    point number(7),                                  		-- 포인트잔액
    constraint member_pk_username primary key(username)
);

--카테고리
create table category(
    cno number(5),                                          --카테고리 번호
    cname varchar2(20 char),                                --카테고리 이름
    pno number(5),                                          --상위 카테고리
    constraint category_pk_cno primary key(cno),
    constraint category_fk_parent foreign key (pno) references category (cno)
);

-- item 테이블 생성
CREATE TABLE item (
    item_no NUMBER(10),                                     -- 상품 고유 번호 (primary Key)
    item_irum VARCHAR2(50 CHAR),                            -- 상품 이름
    item_info CLOB,                                         -- 상품 정보
    item_price NUMBER(10),                                  -- 상품 가격
    item_jango NUMBER(5),                                   -- 재고 수량
    item_sell_qty NUMBER(5),                                -- 판매된 상품의 수량
    review_ea NUMBER(7),                                    -- 리뷰 갯수
    cno NUMBER(5),                                          -- 카테고리 ID (외래 키)
    CONSTRAINT fk_item_category FOREIGN KEY (cno) REFERENCES category (cno), -- 카테고리와의 관계
    CONSTRAINT pk_item PRIMARY KEY (item_no)                 -- item_no를 기본키로 사용
);

create sequence item_seq;
GRANT SELECT ON item_seq TO c##winter_shop;
SELECT sequence_name FROM user_sequences WHERE sequence_name = 'ITEM_SEQ';

-- 상품 사이즈 테이블
create table item_size (
    item_no number(10),                                     -- 상품 고유 번호 (외래 키)
    item_size varchar2(10 CHAR),                            -- 상품 사이즈 (small, medium, large 등)
    item_jango number(5),                                   -- 해당 사이즈의 재고 수량
    constraint item_size_pk primary key (item_no, item_size), -- 복합 기본키: item_no, item_size
    constraint fk_item_size_item foreign key (item_no) references item (item_no) -- 외래 키: item_no
);

-- 상품 사이즈 기본값 추가를 위한 프로시저
CREATE OR REPLACE PROCEDURE add_item_sizes(p_item_no IN NUMBER, p_item_irum IN VARCHAR2, p_item_info IN CLOB, 
                                            p_item_price IN NUMBER, p_item_jango IN NUMBER, p_item_sell_qty IN NUMBER, 
                                            p_review_ea IN NUMBER, p_cno IN NUMBER) IS
    -- 로컬 변수로 p_item_jango 복사
    v_item_jango NUMBER;
BEGIN
    -- p_item_jango 값이 NULL이면 0으로 설정
    IF p_item_jango IS NULL THEN
        v_item_jango := 0;  -- 로컬 변수에 값을 설정
    ELSE
        v_item_jango := p_item_jango;  -- 입력값을 로컬 변수에 할당
    END IF;

    -- 4개의 사이즈 항목을 각각 삽입 (각 사이즈에 0 재고 수량)
    INSERT INTO item_size (item_no, item_size, item_jango) VALUES (p_item_no, 'small', v_item_jango);
    INSERT INTO item_size (item_no, item_size, item_jango) VALUES (p_item_no, 'medium', v_item_jango);
    INSERT INTO item_size (item_no, item_size, item_jango) VALUES (p_item_no, 'large', v_item_jango);
    INSERT INTO item_size (item_no, item_size, item_jango) VALUES (p_item_no, 'xlarge', v_item_jango);

    -- 로그 출력 (삽입된 데이터 확인용)
    DBMS_OUTPUT.PUT_LINE('아이템 사이즈 추가 완료: ' || p_item_no);
END add_item_sizes;
/

-- 트리거 재작성 (다시 실행)
CREATE OR REPLACE TRIGGER trg_item_size_default
AFTER INSERT ON item
FOR EACH ROW
DECLARE
    new_item_no NUMBER;
BEGIN
    -- item_no가 NULL이 아니면 프로시저 호출하여 기본 사이즈 추가
    IF :NEW.item_no IS NOT NULL THEN
        new_item_no := :NEW.item_no;

        -- 로그 출력
        DBMS_OUTPUT.PUT_LINE('트리거 실행: ' || new_item_no);

        -- 프로시저 호출
        BEGIN
            -- 사이즈를 추가하는 프로시저 호출
            add_item_sizes(new_item_no, :NEW.item_irum, :NEW.item_info, :NEW.item_price, :NEW.item_jango, 
                           :NEW.item_sell_qty, :NEW.review_ea, :NEW.cno);

            DBMS_OUTPUT.PUT_LINE('사이즈 추가 완료: ' || new_item_no);
        EXCEPTION
            WHEN OTHERS THEN
                -- 예외 처리, 예를 들어 외래 키 오류시 예외 처리
                DBMS_OUTPUT.PUT_LINE('에러 발생: ' || SQLERRM);
        END;
    END IF;
END;
/

-- 상품 이미지 테이블 생성
create table item_image (
    image_no number(5),                                      -- 이미지 번호 (순차적 번호)
    item_no number(10),                                      -- 상품 번호 (외래 키)
    image_name varchar2(200 char),                           -- 상품 이미지 이름
    constraint fk_item_no foreign key(item_no) references item(item_no), -- 외래 키: item_no
    constraint pk_item_image primary key(item_no, image_no) -- 기본 키는 (item_no, image_no) 조합
);
create sequence item_image_seq;                              -- 시퀀스 생성
GRANT SELECT ON item_image_seq TO c##winter_shop;           -- 권한 부여
SELECT sequence_name FROM user_sequences;
GRANT EXECUTE ON add_item_sizes TO C##WINTER_SHOP;

-- 장바구니 테이블
create table cart(
    item_no number(10),                                                       -- 상품 번호 (외래 키)+(기본키)
    username varchar2(50 CHAR),                                               -- 회원 아이디 (외래 키)
    cart_ea number(2),                                                        -- 장바구니 구매 갯수
    cart_price number(7),                                                     -- 장바구니 구매 가격
    cart_totalprice number(10),                                               -- 장바구니 구매 총 가격
    item_size varchar2(20 Char),                                             -- 상품 사이즈
    constraint cart_pk_item_no primary key (item_no, username, item_size),    -- 기본키: item_no, username, item_size
    constraint fk_cart_member foreign key (username) references member (username),  -- 회원 테이블과의 외래 키 관계
    constraint fk_cart_item foreign key (item_no) references item (item_no)         -- 상품 테이블과의 외래 키 관계
);

create index idx_cart_item_no on cart(item_no);

--배송지
create table address(
    member_username varchar2(50 CHAR),                          -- 회원 ID (외래 키)
    address_no number(10),                                      -- 배송지번호 constraint
    address_main varchar2(100 char),                            -- 기본배송지
    post_no number(10),                                         -- 우편번호 
    address_road varchar2(100 char),                            -- 도로명 주소
    address_detail varchar2(100 char),                          -- 상세주소
    address_name varchar2(100 char),                            -- 배송지이름
    constraint address_pk_address_no primary key(address_no),
    constraint fk_address_member foreign key (member_username) references member (username)
);

--게시판(고객센터, 공지사항, Q&A)
create table board(
    bno number(7),                                              -- 글번호
    title varchar2(20 char),                                    -- 글제목
    writer varchar2(10 char),                                   -- 작성자
    content varchar2(200 char),                                 -- 글내용
    write_time date,                                            -- 작성시간
    read_cnt number(7),                                         -- 조회수
    board_password number(6),                                   -- 글 비밀번호
    secret_board number(5),										-- 비밀글 확인여부
    board_delete number(1),                                		-- 글 삭제
    username VARCHAR2(50 CHAR),                                 -- 회원 ID (외래 키)
    cno number(5),												-- 카테고리 번호(외래 키)
    constraint pk_board_bno primary key(bno),
    constraint fk_board_username foreign key (username) references member (username),
    constraint fk_board_cno foreign key (cno) references category (cno)
);

create sequence board_seq;										--board 시퀀스 생성

--고객센터 글읽은 회원 저장
create table board_read(
	username varchar2(20 char),									--회원 아이디
	bno number(7)												--글 번호
	constraint pk_board_read primary key(username,bno)	
);

--주문
create table orders(
    order_no NUMBER(20),                                        -- 주문번호 (primary key)
    order_date DATE,                                            -- 주문 날짜
    total_price NUMBER(10),                                     -- 주문 총 금액
    order_status VARCHAR2(20),                                  -- 주문 상태
    used_point NUMBER(10),                                      -- 사용 포인트
    act_payment NUMBER(10),                                     -- 실제 결제 금액
    member_username varchar2(50 char),                          -- 회원 ID (외래 키, member 테이블 참조)
    address_no number(10),                                      -- 배송지 번호 (외래 키, address 테이블 참조)
    constraint orders_pk_order_no primary key (order_no),       -- 주문번호 고유키
    constraint orders_fk_member_username foreign key (member_username) references member (username),
    constraint orders_fk_post_no foreign key (address_no) references address (address_no)
);

--주문 상세
create table orders_detail (
    order_no number(20),                                         -- 주문번호 (외래 키, orders 테이블 참조)
    item_no number(20),                                          -- 상품번호 (외래 키, item 테이블 참조)
    item_name varchar2(100 char),                                -- 상품명
    image varchar2(300 char),                                    -- 이미지 (URL 경로)
    detail_ea number(7),                                         -- 수량
    price number(9),                                             -- 가격 (개당)
    review_written char(1),                                      -- 리뷰 작성 여부 (Y/N)
    constraint orders_detail_pk primary key (order_no, item_no),
    constraint orders_detail_fk_order_no foreign key (order_no) references orders (order_no),
    constraint orders_detail_fk_item_no foreign key (item_no) references item (item_no)
);

--결제 // 카카오페이 결제로 인해서 테이블 수정★★★
create table payment (
    order_no NUMBER(20),                             -- 주문번호 (외래 키, orders 테이블 참조) 
    username VARCHAR2(50 CHAR),                      -- 회원 ID (외래 키, member 테이블 참조) 
    item_name VARCHAR2(50 CHAR),                     -- 상품 이름 (결제 시점의 상품 이름 저장)
    total_amount NUMBER(20),                         -- 총 결제 금액
    tid VARCHAR2(255 CHAR),                          -- 카카오페이
    payment_status VARCHAR2(50 CHAR),                -- 카카오페이
    CONSTRAINT payment_pk PRIMARY KEY (order_no),
    CONSTRAINT payment_fk_order_no FOREIGN KEY (order_no) REFERENCES orders (order_no),
    CONSTRAINT payment_fk_username FOREIGN KEY (username) REFERENCES member (username)
);

--리뷰
create table review(
    review_no number(7),                                        --리뷰 번호
    review_write_time date,                                     --리뷰 작성시간
    review_writer varchar2(20 char),                            --리뷰 작성자
    review_good_cnt number(7),                                  --리뷰 별점
    username varchar2(50 char),                                 -- 회원 ID (외래 키, member 테이블 참조)
    item_no number(10),                                       	-- 상품번호 (외래 키, item 테이블 참조)
    constraint review_pk_review_no primary key (review_no),
    constraint review_fk_username foreign key (username) references member (username),
    constraint review_fk_item_no foreign key (item_no) references item (item_no)
);

--댓글 추가
create table comments(
	comment_cno number(7),										--댓글 번호
	comment_content varchar2(200),								--댓글 내용
	comment_writer varchar2(20),								--댓글 내용
	comment_write_time date,									--댓글 작성시간
	bno number(7),												--글의 번호(외래키)
	constraint comments_pk_comments_cno primary key(comment_cno)
);

create sequence comments_seq;									--댓글 시퀀스 생성

select * from tab;